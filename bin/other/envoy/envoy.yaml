# Envoy Proxy configuration as an alternative to HAProxy
# Provides more advanced rate limiting capabilities

static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 10000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          access_log:
          - name: envoy.access_loggers.stdout
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
              log_format:
                text_format: |
                  [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%"
                  %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT%
                  %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%"
                  "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%"
                  rate_limit_group="%REQ(X-API-KEY-GROUP)%" api_key="%REQ(X-EXTRACTED-API-KEY)%"
          
          http_filters:
          # API Key extraction filter
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              default_source_code:
                inline_string: |
                  function extract_api_key(request_handle)
                    local auth_header = request_handle:headers():get("authorization")
                    local api_key = "anonymous"
                    local group = "basic"
                    
                    if auth_header then
                      -- AWS Signature V4
                      local v4_key = string.match(auth_header, "AWS4%-HMAC%-SHA256%s+Credential=([^/]+)/")
                      if v4_key then
                        api_key = v4_key
                      else
                        -- AWS Signature V2
                        local v2_key = string.match(auth_header, "AWS%s+([^:]+):")
                        if v2_key then
                          api_key = v2_key
                        end
                      end
                    end
                    
                    -- Check query parameters if not found in header
                    if api_key == "anonymous" then
                      local path = request_handle:headers():get(":path")
                      if path then
                        local v4_query = string.match(path, "[?&]X%-Amz%-Credential=([^/&]+)/")
                        if v4_query then
                          api_key = v4_query
                        else
                          local v2_query = string.match(path, "[?&]AWSAccessKeyId=([^&]+)")
                          if v2_query then
                            api_key = v2_query
                          end
                        end
                      end
                    end
                    
                    -- Determine group based on API key
                    -- In production, this would lookup from external source
                    if string.match(api_key, "premium") or api_key == "AKIAIOSFODNN7EXAMPLE" then
                      group = "premium"
                    elseif string.match(api_key, "standard") or api_key == "AKIAI44QH8DHBEXAMPLE" then  
                      group = "standard"
                    else
                      group = "basic"
                    end
                    
                    request_handle:headers():add("x-extracted-api-key", api_key)
                    request_handle:headers():add("x-api-key-group", group)
                    
                    request_handle:logInfo("Extracted API key: " .. api_key .. " -> group: " .. group)
                  end
                  
                  function envoy_on_request(request_handle)
                    extract_api_key(request_handle)
                  end

          # Rate limiting filter
          - name: envoy.filters.http.local_ratelimit
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
              stat_prefix: local_rate_limiter
              token_bucket:
                max_tokens: 1000
                tokens_per_fill: 1000
                fill_interval: 60s
              filter_enabled:
                runtime_key: local_rate_limit_enabled
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              filter_enforced:
                runtime_key: local_rate_limit_enforced
                default_value:
                  numerator: 100
                  denominator: HUNDRED
              response_headers_to_add:
              - append_action: OVERWRITE_IF_EXISTS_OR_ADD
                header:
                  key: x-local-rate-limit
                  value: 'true'
              descriptors:
              # Premium group - 1000 requests per minute
              - entries:
                - key: api_key_group
                  value: premium
                token_bucket:
                  max_tokens: 1000
                  tokens_per_fill: 1000  
                  fill_interval: 60s
              # Standard group - 500 requests per minute
              - entries:
                - key: api_key_group
                  value: standard
                token_bucket:
                  max_tokens: 500
                  tokens_per_fill: 500
                  fill_interval: 60s
              # Basic group - 100 requests per minute  
              - entries:
                - key: api_key_group
                  value: basic
                token_bucket:
                  max_tokens: 100
                  tokens_per_fill: 100
                  fill_interval: 60s

          # Router filter
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: minio_cluster
                  timeout: 0s
                  retry_policy:
                    retry_on: "5xx,reset,connect-failure,refused-stream"
                    num_retries: 2

  clusters:
  - name: minio_cluster
    connect_timeout: 0.25s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: minio_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: minio1
                port_value: 9000
        - endpoint:
            address:
              socket_address:
                address: minio2  
                port_value: 9000
    health_checks:
    - timeout: 5s
      interval: 10s
      unhealthy_threshold: 2
      healthy_threshold: 2
      http_health_check:
        path: "/minio/health/live"

admin:
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 9901