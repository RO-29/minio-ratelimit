global
    daemon
    maxconn 4096
    log stdout local0 info
    
    # Lua script for advanced API key extraction
    lua-load /etc/haproxy/lua/api_key_extractor.lua
    
    # Stats socket for runtime API (Docker-friendly path)
    stats socket /tmp/haproxy.sock mode 666 level admin
    stats timeout 30s

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option httplog
    log global

# Frontend for S3 API requests
frontend s3_frontend
    bind *:80
    
    # Extract API key using Lua script (supports AWS Sig V4/V2)
    http-request lua.extract_api_key
    
    # Set rate limit group based on API key configuration
    http-request lua.get_rate_group
    
    # Track requests per API key in stick tables for different time windows
    http-request track-sc0 var(txn.api_key) table api_key_rates_1m
    http-request track-sc1 var(txn.api_key) table api_key_rates_1s
    
    # Define method filters (focus on PUT and GET as requested)
    acl rate_limited_methods method PUT GET
    
    # Rate limiting groups with dynamic limits
    acl is_premium_group var(txn.rate_group) -m str premium
    acl is_standard_group var(txn.rate_group) -m str standard  
    acl is_basic_group var(txn.rate_group) -m str basic
    acl is_unknown_group var(txn.rate_group) -m str unknown
    
    # Rate limit checks per group (separate ACLs)
    acl premium_rate_exceeded sc_http_req_rate(0) gt 1000
    acl standard_rate_exceeded sc_http_req_rate(0) gt 500  
    acl basic_rate_exceeded sc_http_req_rate(0) gt 100
    acl unknown_rate_exceeded sc_http_req_rate(0) gt 50
    
    # Burst rate limit checks per group
    acl premium_burst_exceeded sc_http_req_rate(1) gt 50
    acl standard_burst_exceeded sc_http_req_rate(1) gt 25
    acl basic_burst_exceeded sc_http_req_rate(1) gt 10
    acl unknown_burst_exceeded sc_http_req_rate(1) gt 5
    
    # Calculate remaining requests using Lua
    http-request set-var(txn.current_rate_1m) sc_http_req_rate(0)
    http-request lua.calculate_remaining
    
    # Enhanced S3-compatible error responses for rate limiting
    # Block based on group-specific rate limits
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Premium rate limit exceeded (1000 req/min). Current: %[var(txn.current_rate_1m)] req/min</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId></Error>" if rate_limited_methods is_premium_group premium_rate_exceeded
    
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Standard rate limit exceeded (500 req/min). Current: %[var(txn.current_rate_1m)] req/min</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId></Error>" if rate_limited_methods is_standard_group standard_rate_exceeded
    
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Basic rate limit exceeded (100 req/min). Current: %[var(txn.current_rate_1m)] req/min</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId></Error>" if rate_limited_methods is_basic_group basic_rate_exceeded
    
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Rate limit exceeded (50 req/min). Current: %[var(txn.current_rate_1m)] req/min</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId></Error>" if rate_limited_methods is_unknown_group unknown_rate_exceeded
    
    # Burst limit denials
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Premium burst limit exceeded (50 req/sec)</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId></Error>" if rate_limited_methods is_premium_group premium_burst_exceeded
    
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Standard burst limit exceeded (25 req/sec)</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId></Error>" if rate_limited_methods is_standard_group standard_burst_exceeded
    
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Basic burst limit exceeded (10 req/sec)</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId></Error>" if rate_limited_methods is_basic_group basic_burst_exceeded
    
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Burst limit exceeded (5 req/sec)</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId></Error>" if rate_limited_methods is_unknown_group unknown_burst_exceeded
    
    # Add comprehensive rate limiting headers
    http-request set-header X-API-Key-Group %[var(txn.rate_group)]
    http-request set-header X-Auth-Method %[var(txn.auth_method)]
    http-request set-header X-Request-ID %[uuid()]
    
    # Add rate limit headers to all responses
    http-response set-header X-RateLimit-Group "%[var(txn.rate_group)]"
    http-response set-header X-API-Key "%[var(txn.api_key)]"
    http-response set-header X-Auth-Method "%[var(txn.auth_method)]"
    
    # Dynamic rate limit headers based on group
    http-response set-header X-RateLimit-Limit-Per-Minute "1000" if is_premium_group
    http-response set-header X-RateLimit-Limit-Per-Minute "500" if is_standard_group
    http-response set-header X-RateLimit-Limit-Per-Minute "100" if is_basic_group
    http-response set-header X-RateLimit-Limit-Per-Minute "50" if is_unknown_group
    
    http-response set-header X-RateLimit-Limit-Per-Second "50" if is_premium_group
    http-response set-header X-RateLimit-Limit-Per-Second "25" if is_standard_group
    http-response set-header X-RateLimit-Limit-Per-Second "10" if is_basic_group
    http-response set-header X-RateLimit-Limit-Per-Second "5" if is_unknown_group
    
    http-response set-header X-RateLimit-Remaining-Per-Minute "%[var(txn.remaining_requests)]"
    http-response set-header X-RateLimit-Current-Per-Minute "%[var(txn.current_rate_1m)]"
    http-response set-header X-RateLimit-Reset "%[date(3600),add(date())]"
    
    default_backend minio_backend

# Backend for MinIO cluster
backend minio_backend
    balance roundrobin
    # option httpchk GET /minio/health/ready  # Disabled for testing
    
    # MinIO server instances (Docker service name)
    server minio1 minio:9000

# Stick tables for API key rate tracking
backend api_key_rates_1m
    stick-table type string len 64 size 100k expire 2m store http_req_rate(1m),http_req_cnt,http_err_rate(1m)

backend api_key_rates_1s  
    stick-table type string len 64 size 100k expire 10s store http_req_rate(1s),http_req_cnt

# Stats interface with enhanced information
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats show-legends
    stats show-desc "HAProxy MinIO Rate Limiting Stats"