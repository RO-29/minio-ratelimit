global
    daemon
    maxconn 4096
    log stdout local0 info
    
    # Stats socket for runtime API (Docker-friendly path)
    stats socket /tmp/haproxy.sock mode 666 level admin
    stats timeout 30s

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option httplog
    log global

# Frontend for S3 API requests
frontend s3_frontend
    bind *:80
    
    # Extract API key from URL parameter (simplified)
    http-request set-var(txn.api_key) url_param(AWSAccessKeyId) if { url_param(AWSAccessKeyId) -m found }
    http-request set-var(txn.api_key) str(default-key) if !{ var(txn.api_key) -m found }
    
    # Set rate limit group (simplified)
    http-request set-var(txn.rate_group) str(basic)
    
    # Track requests per API key in stick table 
    http-request track-sc0 var(txn.api_key) table api_key_rates_1m
    http-request track-sc1 var(txn.api_key) table api_key_rates_1s
    
    # Define method filters  
    acl rate_limited_methods method PUT GET
    
    # Rate limiting groups
    acl is_basic_group var(txn.rate_group) -m str basic
    
    # Check rate limits with fixed values
    acl rate_exceeded_per_min sc_http_req_rate(0) gt 100
    acl rate_exceeded_per_sec sc_http_req_rate(1) gt 10
    
    # Block requests that exceed rate limits (only for PUT/GET)
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Rate limit exceeded</Message></Error>" if rate_limited_methods rate_exceeded_per_min
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Burst limit exceeded</Message></Error>" if rate_limited_methods rate_exceeded_per_sec
    
    # Add rate limit headers
    http-response set-header X-RateLimit-Limit "100"
    http-response set-header X-RateLimit-Group "%[var(txn.rate_group)]"
    http-response set-header X-API-Key "%[var(txn.api_key)]"
    
    default_backend minio_backend

# Backend for MinIO cluster
backend minio_backend
    balance roundrobin
    # option httpchk GET /minio/health/ready  # Disabled for testing
    
    # MinIO server instances (Docker service name)
    server minio1 minio:9000

# Stick tables for API key rate tracking
backend api_key_rates_1m
    stick-table type string len 64 size 100k expire 2m store http_req_rate(1m),http_req_cnt

backend api_key_rates_1s  
    stick-table type string len 64 size 100k expire 10s store http_req_rate(1s),http_req_cnt

# Stats interface
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
