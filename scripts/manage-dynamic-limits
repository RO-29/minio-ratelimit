#!/bin/bash

# Dynamic Rate Limit Management Script
# Manages all aspects of rate limiting without hardcoded values
# Usage: ./manage-dynamic-limits [command] [options]

CONFIG_DIR="../haproxy/config"
API_GROUPS_MAP="$CONFIG_DIR/api_key_groups.map"
MINUTE_LIMITS_MAP="$CONFIG_DIR/rate_limits_per_minute.map"
SECOND_LIMITS_MAP="$CONFIG_DIR/rate_limits_per_second.map"
ERROR_MESSAGES_MAP="$CONFIG_DIR/error_messages.map"
BACKUP_DIR="$CONFIG_DIR/backups"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Ensure backup directory exists
mkdir -p "$BACKUP_DIR"

show_help() {
    echo -e "${BLUE}Dynamic Rate Limit Management - Zero Hardcoded Values${NC}"
    echo "Usage: $0 [command] [options]"
    echo ""
    echo "API Key Management:"
    echo "  add-key <key> <group>           Add API key to group"
    echo "  remove-key <key>                Remove API key"
    echo "  update-key <key> <new_group>    Update API key group"
    echo "  list-keys                       List all API keys"
    echo ""
    echo "Rate Limit Management:"
    echo "  set-minute-limit <group> <limit>    Set per-minute limit for group"
    echo "  set-second-limit <group> <limit>    Set per-second limit for group"
    echo "  get-limits <group>                  Get current limits for group"
    echo "  list-all-limits                     List all rate limits"
    echo ""
    echo "Error Message Management:"
    echo "  set-error-msg <group> <message>     Set custom error message"
    echo "  get-error-msg <group>               Get error message for group"
    echo ""
    echo "System Management:"
    echo "  reload                          Hot reload HAProxy configuration"
    echo "  validate                        Validate all map files"
    echo "  backup                          Create backup of all configs"
    echo "  restore <backup_date>           Restore from backup"
    echo "  show-stats                      Show current system status"
    echo ""
}

backup_configs() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_prefix="$BACKUP_DIR/dynamic_config_${timestamp}"

    echo -e "${YELLOW}Creating backup...${NC}"

    [ -f "$API_GROUPS_MAP" ] && cp "$API_GROUPS_MAP" "${backup_prefix}_api_groups.map"
    [ -f "$MINUTE_LIMITS_MAP" ] && cp "$MINUTE_LIMITS_MAP" "${backup_prefix}_minute_limits.map"
    [ -f "$SECOND_LIMITS_MAP" ] && cp "$SECOND_LIMITS_MAP" "${backup_prefix}_second_limits.map"
    [ -f "$ERROR_MESSAGES_MAP" ] && cp "$ERROR_MESSAGES_MAP" "${backup_prefix}_error_messages.map"

    echo -e "${GREEN}✅ Backup created: ${timestamp}${NC}"
}

validate_map_files() {
    local errors=0

    echo -e "${BLUE}Validating all map files...${NC}"

    # Check API groups map
    if [ -f "$API_GROUPS_MAP" ]; then
        if ! grep -q '^[A-Z0-9]' "$API_GROUPS_MAP" 2>/dev/null; then
            echo -e "${RED}❌ API groups map appears empty or invalid${NC}"
            errors=$((errors + 1))
        else
            echo -e "${GREEN}✅ API groups map: $(grep -c '^[A-Z0-9]' "$API_GROUPS_MAP") keys${NC}"
        fi
    fi

    # Check rate limit maps
    for map_file in "$MINUTE_LIMITS_MAP" "$SECOND_LIMITS_MAP"; do
        if [ -f "$map_file" ]; then
            if ! grep -qE '^[a-z]+ [0-9]+$' "$map_file" 2>/dev/null; then
                echo -e "${RED}❌ $(basename "$map_file") has invalid format${NC}"
                errors=$((errors + 1))
            else
                echo -e "${GREEN}✅ $(basename "$map_file"): valid${NC}"
            fi
        fi
    done

    return $errors
}

reload_haproxy() {
    echo -e "${YELLOW}Hot reloading HAProxy configuration...${NC}"

    # Try Docker containers first
    if docker ps --format "table {{.Names}}" | grep -q "haproxy"; then
        echo "Reloading HAProxy containers..."
        for container in $(docker ps --format "{{.Names}}" | grep haproxy); do
            echo "  → $container"
            docker exec "$container" haproxy -f /usr/local/etc/haproxy/haproxy.cfg -sf $(docker exec "$container" pidof haproxy) 2>/dev/null || {
                echo -e "${YELLOW}    Restarting $container${NC}"
                docker restart "$container" >/dev/null
            }
        done
    else
        # Try local HAProxy
        if command -v haproxy >/dev/null 2>&1; then
            sudo haproxy -f haproxy.cfg -sf $(pidof haproxy) 2>/dev/null || {
                echo -e "${YELLOW}HAProxy not running, starting...${NC}"
                sudo haproxy -f haproxy.cfg -D
            }
        else
            echo -e "${RED}❌ HAProxy not found${NC}"
            return 1
        fi
    fi

    echo -e "${GREEN}✅ HAProxy configuration reloaded${NC}"
}

set_minute_limit() {
    local group="$1"
    local limit="$2"

    if [ -z "$group" ] || [ -z "$limit" ]; then
        echo -e "${RED}❌ Usage: set-minute-limit <group> <limit>${NC}"
        return 1
    fi

    if ! [[ "$limit" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}❌ Limit must be a number${NC}"
        return 1
    fi

    backup_configs

    # Update or add the limit
    if grep -q "^$group " "$MINUTE_LIMITS_MAP" 2>/dev/null; then
        sed -i.bak "s/^$group [0-9]*/$group $limit/" "$MINUTE_LIMITS_MAP"
        echo -e "${GREEN}✅ Updated minute limit for $group: $limit${NC}"
    else
        echo "$group $limit" >> "$MINUTE_LIMITS_MAP"
        echo -e "${GREEN}✅ Added minute limit for $group: $limit${NC}"
    fi

    reload_haproxy
}

set_second_limit() {
    local group="$1"
    local limit="$2"

    if [ -z "$group" ] || [ -z "$limit" ]; then
        echo -e "${RED}❌ Usage: set-second-limit <group> <limit>${NC}"
        return 1
    fi

    if ! [[ "$limit" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}❌ Limit must be a number${NC}"
        return 1
    fi

    backup_configs

    # Update or add the limit
    if grep -q "^$group " "$SECOND_LIMITS_MAP" 2>/dev/null; then
        sed -i.bak "s/^$group [0-9]*/$group $limit/" "$SECOND_LIMITS_MAP"
        echo -e "${GREEN}✅ Updated second limit for $group: $limit${NC}"
    else
        echo "$group $limit" >> "$SECOND_LIMITS_MAP"
        echo -e "${GREEN}✅ Added second limit for $group: $limit${NC}"
    fi

    reload_haproxy
}

get_limits() {
    local group="$1"

    if [ -z "$group" ]; then
        echo -e "${RED}❌ Usage: get-limits <group>${NC}"
        return 1
    fi

    echo -e "${BLUE}Rate limits for group: $group${NC}"

    local minute_limit=$(grep "^$group " "$MINUTE_LIMITS_MAP" 2>/dev/null | awk '{print $2}')
    local second_limit=$(grep "^$group " "$SECOND_LIMITS_MAP" 2>/dev/null | awk '{print $2}')
    local error_msg=$(grep "^$group " "$ERROR_MESSAGES_MAP" 2>/dev/null | cut -d' ' -f2-)

    echo "  Per-minute limit: ${minute_limit:-'not set'}"
    echo "  Per-second limit: ${second_limit:-'not set'}"
    echo "  Error message: ${error_msg:-'not set'}"
}

list_all_limits() {
    echo -e "${BLUE}All Dynamic Rate Limits${NC}"
    echo "========================"

    # Get all unique groups
    local groups=$(cat "$MINUTE_LIMITS_MAP" "$SECOND_LIMITS_MAP" "$ERROR_MESSAGES_MAP" 2>/dev/null | grep -v '^#' | awk '{print $1}' | sort -u)

    printf "%-10s %-12s %-12s %-30s\n" "GROUP" "PER-MINUTE" "PER-SECOND" "ERROR MESSAGE"
    printf "%-10s %-12s %-12s %-30s\n" "------" "----------" "----------" "-------------"

    for group in $groups; do
        local minute_limit=$(grep "^$group " "$MINUTE_LIMITS_MAP" 2>/dev/null | awk '{print $2}')
        local second_limit=$(grep "^$group " "$SECOND_LIMITS_MAP" 2>/dev/null | awk '{print $2}')
        local error_msg=$(grep "^$group " "$ERROR_MESSAGES_MAP" 2>/dev/null | cut -d' ' -f2- | cut -c1-28)

        printf "%-10s %-12s %-12s %-30s\n" "$group" "${minute_limit:-'-'}" "${second_limit:-'-'}" "${error_msg:-'-'}"
    done
}

add_api_key() {
    local key="$1"
    local group="$2"

    if [ -z "$key" ] || [ -z "$group" ]; then
        echo -e "${RED}❌ Usage: add-key <key> <group>${NC}"
        return 1
    fi

    backup_configs

    # Check if key already exists
    if grep -q "^$key " "$API_GROUPS_MAP" 2>/dev/null; then
        echo -e "${YELLOW}⚠️ Key already exists, updating group...${NC}"
        sed -i.bak "s/^$key .*/$key $group/" "$API_GROUPS_MAP"
    else
        echo "$key $group" >> "$API_GROUPS_MAP"
    fi

    echo -e "${GREEN}✅ API key $key assigned to group: $group${NC}"
    reload_haproxy
}

remove_api_key() {
    local key="$1"

    if [ -z "$key" ]; then
        echo -e "${RED}❌ Usage: remove-key <key>${NC}"
        return 1
    fi

    if ! grep -q "^$key " "$API_GROUPS_MAP" 2>/dev/null; then
        echo -e "${RED}❌ API key not found: $key${NC}"
        return 1
    fi

    backup_configs

    # Remove the key
    grep -v "^$key " "$API_GROUPS_MAP" > "$API_GROUPS_MAP.tmp" && mv "$API_GROUPS_MAP.tmp" "$API_GROUPS_MAP"

    echo -e "${GREEN}✅ API key removed: $key${NC}"
    reload_haproxy
}

update_api_key() {
    local key="$1"
    local new_group="$2"

    if [ -z "$key" ] || [ -z "$new_group" ]; then
        echo -e "${RED}❌ Usage: update-key <key> <new_group>${NC}"
        return 1
    fi

    if ! grep -q "^$key " "$API_GROUPS_MAP" 2>/dev/null; then
        echo -e "${RED}❌ API key not found: $key${NC}"
        return 1
    fi

    local old_group=$(grep "^$key " "$API_GROUPS_MAP" | awk '{print $2}')

    backup_configs

    # Update the key's group
    sed -i.bak "s/^$key .*/$key $new_group/" "$API_GROUPS_MAP"

    echo -e "${GREEN}✅ API key $key updated: $old_group → $new_group${NC}"
    reload_haproxy
}

list_api_keys() {
    if [ ! -f "$API_GROUPS_MAP" ]; then
        echo -e "${RED}❌ No API keys file found${NC}"
        return 1
    fi

    echo -e "${BLUE}All API Keys${NC}"
    echo "============"

    printf "%-25s %-15s\n" "API KEY" "GROUP"
    printf "%-25s %-15s\n" "-------" "-----"

    grep -v '^#' "$API_GROUPS_MAP" 2>/dev/null | sort -k2,2 -k1,1 | while read key group; do
        printf "%-25s %-15s\n" "$key" "$group"
    done

    echo ""
    echo -e "${BLUE}Summary:${NC}"
    grep -v '^#' "$API_GROUPS_MAP" 2>/dev/null | awk '{print $2}' | sort | uniq -c | while read count group; do
        echo "  $group: $count keys"
    done
}

set_error_message() {
    local group="$1"
    local message="$2"

    if [ -z "$group" ] || [ -z "$message" ]; then
        echo -e "${RED}❌ Usage: set-error-msg <group> <message>${NC}"
        return 1
    fi

    backup_configs

    # Update or add the error message
    if grep -q "^$group " "$ERROR_MESSAGES_MAP" 2>/dev/null; then
        sed -i.bak "s/^$group .*/$group $message/" "$ERROR_MESSAGES_MAP"
        echo -e "${GREEN}✅ Updated error message for $group${NC}"
    else
        echo "$group $message" >> "$ERROR_MESSAGES_MAP"
        echo -e "${GREEN}✅ Added error message for $group${NC}"
    fi

    reload_haproxy
}

get_error_message() {
    local group="$1"

    if [ -z "$group" ]; then
        echo -e "${RED}❌ Usage: get-error-msg <group>${NC}"
        return 1
    fi

    local error_msg=$(grep "^$group " "$ERROR_MESSAGES_MAP" 2>/dev/null | cut -d' ' -f2-)

    if [ -n "$error_msg" ]; then
        echo -e "${BLUE}Error message for group '$group':${NC}"
        echo "  $error_msg"
    else
        echo -e "${YELLOW}⚠️ No custom error message set for group: $group${NC}"
        echo "  (Will use default: Rate_limit_exceeded)"
    fi
}

restore_backup() {
    local backup_date="$1"

    if [ -z "$backup_date" ]; then
        echo -e "${RED}❌ Usage: restore <backup_date>${NC}"
        echo -e "${BLUE}Available backups:${NC}"
        ls -1 "$BACKUP_DIR" | grep -E "_[0-9]{8}_[0-9]{6}_" | sed 's/dynamic_config_\([0-9_]*\)_.*/\1/' | sort -u
        return 1
    fi

    local backup_files=$(ls "$BACKUP_DIR"/dynamic_config_${backup_date}_*.map 2>/dev/null)

    if [ -z "$backup_files" ]; then
        echo -e "${RED}❌ No backup found for date: $backup_date${NC}"
        return 1
    fi

    echo -e "${YELLOW}Restoring configuration from backup: $backup_date${NC}"

    # Create current backup before restoring
    backup_configs

    # Restore each file
    for backup_file in $backup_files; do
        local basename=$(basename "$backup_file")
        case "$basename" in
            *_api_groups.map)
                cp "$backup_file" "$API_GROUPS_MAP"
                echo -e "${GREEN}✅ Restored API groups${NC}"
                ;;
            *_minute_limits.map)
                cp "$backup_file" "$MINUTE_LIMITS_MAP"
                echo -e "${GREEN}✅ Restored minute limits${NC}"
                ;;
            *_second_limits.map)
                cp "$backup_file" "$SECOND_LIMITS_MAP"
                echo -e "${GREEN}✅ Restored second limits${NC}"
                ;;
            *_error_messages.map)
                cp "$backup_file" "$ERROR_MESSAGES_MAP"
                echo -e "${GREEN}✅ Restored error messages${NC}"
                ;;
        esac
    done

    echo -e "${YELLOW}Validating restored configuration...${NC}"
    if validate_map_files; then
        reload_haproxy
        echo -e "${GREEN}✅ Configuration restored successfully${NC}"
    else
        echo -e "${RED}❌ Restored configuration has errors${NC}"
        return 1
    fi
}

show_stats() {
    echo -e "${BLUE}Dynamic Rate Limiting System Status${NC}"
    echo "==================================="

    # Count API keys by group
    if [ -f "$API_GROUPS_MAP" ]; then
        echo -e "${GREEN}API Keys by Group:${NC}"
        grep -v '^#' "$API_GROUPS_MAP" 2>/dev/null | awk '{print $2}' | sort | uniq -c | while read count group; do
            echo "  $group: $count keys"
        done
        echo "  Total: $(grep -c -v '^#' "$API_GROUPS_MAP" 2>/dev/null || echo 0) keys"
    fi

    echo ""
    list_all_limits

    echo ""
    echo -e "${BLUE}Map Files Status:${NC}"
    for file in "$API_GROUPS_MAP" "$MINUTE_LIMITS_MAP" "$SECOND_LIMITS_MAP" "$ERROR_MESSAGES_MAP"; do
        if [ -f "$file" ]; then
            echo -e "${GREEN}✅ $(basename "$file")${NC}"
        else
            echo -e "${RED}❌ $(basename "$file")${NC}"
        fi
    done
}

# Main command handler
case "$1" in
    "add-key")
        add_api_key "$2" "$3"
        ;;
    "remove-key")
        remove_api_key "$2"
        ;;
    "update-key")
        update_api_key "$2" "$3"
        ;;
    "list-keys")
        list_api_keys
        ;;
    "set-minute-limit")
        set_minute_limit "$2" "$3"
        ;;
    "set-second-limit")
        set_second_limit "$2" "$3"
        ;;
    "get-limits")
        get_limits "$2"
        ;;
    "list-all-limits")
        list_all_limits
        ;;
    "set-error-msg")
        set_error_message "$2" "$3"
        ;;
    "get-error-msg")
        get_error_message "$2"
        ;;
    "reload")
        reload_haproxy
        ;;
    "validate")
        validate_map_files
        ;;
    "backup")
        backup_configs
        ;;
    "restore")
        restore_backup "$2"
        ;;
    "show-stats")
        show_stats
        ;;
    *)
        show_help
        ;;
esac
