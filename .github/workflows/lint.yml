name: MinIO Rate Limit Linting

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - '**.go'
      - '**.lua'
      - 'haproxy/haproxy.cfg'
      - 'haproxy/config/**'
      - '.github/workflows/lint.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - '**.go'
      - '**.lua'
      - 'haproxy/haproxy.cfg'
      - 'haproxy/config/**'
      - '.github/workflows/lint.yml'
  workflow_dispatch:

jobs:
  lint-go:
    name: Lint Go Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Go version
        id: get_version
        run: |
          GO_VERSION=$(grep -E '^GO_VERSION :=' versions.mk | sed 's/GO_VERSION := //')
          echo "go_version=$GO_VERSION" >> $GITHUB_OUTPUT
          echo "Using Go version: $GO_VERSION"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.get_version.outputs.go_version }}

      - name: Install golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Lint Go code
        run: make lint-go

  lint-haproxy:
    name: Validate HAProxy Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract HAProxy version
        id: get_haproxy_version
        run: |
          HAPROXY_VERSION=$(grep -E '^HAPROXY_VERSION :=' versions.mk | sed 's/HAPROXY_VERSION := //')
          echo "haproxy_version=$HAPROXY_VERSION" >> $GITHUB_OUTPUT
          echo "Using HAProxy version: $HAPROXY_VERSION"

      - name: Install HAProxy
        run: |
          sudo apt-get update

          # For HAProxy 3.0, we need to use a PPA or Docker container
          echo "Trying to install HAProxy 3.0..."

          # Try to add HAProxy's official PPA
          sudo add-apt-repository -y ppa:vbernat/haproxy-3.0 || true
          sudo apt-get update

          # Check available versions
          echo "Available HAProxy versions:"
          apt-cache madison haproxy

          # Try specific installation approaches
          if sudo apt-cache madison haproxy | grep -q "3.0"; then
            echo "Found HAProxy 3.0 in repositories, installing..."
            sudo apt-get install -y haproxy=3.0*
          elif command -v docker >/dev/null 2>&1; then
            echo "Using Docker to run HAProxy 3.0 validation"
            docker pull haproxy:3.0
            # Create a wrapper script for haproxy command
            echo '#!/bin/bash' | sudo tee /usr/local/bin/haproxy
            echo 'docker run --rm -v $(pwd):/etc/haproxy:ro haproxy:3.0 haproxy "$@"' | sudo tee -a /usr/local/bin/haproxy
            sudo chmod +x /usr/local/bin/haproxy
          else
            echo "::warning::Could not install HAProxy 3.0 - falling back to available version"
            sudo apt-get install -y haproxy
          fi

          # Check haproxy version
          echo "Installed HAProxy version:"
          which haproxy
          haproxy -v || echo "HAProxy command not available directly, using Docker container"

      - name: Validate HAProxy configuration
        run: |
          chmod +x ./scripts/haproxy_validate.sh
          CI=true CI_NO_COLOR=true ./scripts/haproxy_validate.sh --local-only

  lint-lua:
    name: Validate Lua Scripts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Lua version
        id: get_lua_version
        run: |
          LUA_VERSION=$(grep -E '^LUA_VERSION :=' versions.mk | sed 's/LUA_VERSION := //')
          echo "lua_version=$LUA_VERSION" >> $GITHUB_OUTPUT
          echo "Using Lua version: $LUA_VERSION"

      - name: Install Lua
        run: |
          sudo apt-get update
          sudo apt-get install -y lua${{ steps.get_lua_version.outputs.lua_version }} luarocks

      - name: Validate Lua scripts
        run: |
          chmod +x ./scripts/lua_validate.sh
          CI=true CI_NO_COLOR=true ./scripts/lua_validate.sh --local-only

      - name: Test Lua scripts
        run: |
          chmod +x ./scripts/test_lua_scripts.sh
          CI_NO_COLOR=true ./scripts/test_lua_scripts.sh
