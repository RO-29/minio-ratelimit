name: MinIO Rate Limit CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  setup:
    name: Extract Versions
    runs-on: ubuntu-latest
    outputs:
      go_version: ${{ steps.extract_versions.outputs.go_version }}
      lua_version: ${{ steps.extract_versions.outputs.lua_version }}
      haproxy_version: ${{ steps.extract_versions.outputs.haproxy_version }}
      minio_version: ${{ steps.extract_versions.outputs.minio_version }}
      docker_compose_version: ${{ steps.extract_versions.outputs.docker_compose_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract version information
        id: extract_versions
        run: |
          # Extract versions from versions.mk
          GO_VERSION=$(grep -E '^GO_VERSION :=' versions.mk | sed 's/GO_VERSION := //')
          LUA_VERSION=$(grep -E '^LUA_VERSION :=' versions.mk | sed 's/LUA_VERSION := //')
          HAPROXY_VERSION=$(grep -E '^HAPROXY_VERSION :=' versions.mk | sed 's/HAPROXY_VERSION := //')
          MINIO_VERSION=$(grep -E '^MINIO_VERSION :=' versions.mk | sed 's/MINIO_VERSION := //')
          DOCKER_COMPOSE_VERSION=$(grep -E '^DOCKER_COMPOSE_VERSION :=' versions.mk | sed 's/DOCKER_COMPOSE_VERSION := //')

          echo "Extracted versions:"
          echo "Go: $GO_VERSION"
          echo "Lua: $LUA_VERSION"
          echo "HAProxy: $HAPROXY_VERSION"
          echo "MinIO: $MINIO_VERSION"
          echo "Docker Compose: $DOCKER_COMPOSE_VERSION"

          # Verify versions are properly extracted
          if [[ -z "$GO_VERSION" || -z "$LUA_VERSION" || -z "$HAPROXY_VERSION" || -z "$MINIO_VERSION" ]]; then
            echo "::error::Failed to extract one or more versions from versions.mk"
            exit 1
          fi

          # Set outputs for other jobs to use
          echo "go_version=$GO_VERSION" >> $GITHUB_OUTPUT
          echo "lua_version=$LUA_VERSION" >> $GITHUB_OUTPUT
          echo "haproxy_version=$HAPROXY_VERSION" >> $GITHUB_OUTPUT
          echo "minio_version=$MINIO_VERSION" >> $GITHUB_OUTPUT
          echo "docker_compose_version=$DOCKER_COMPOSE_VERSION" >> $GITHUB_OUTPUT

      - name: Test export_versions.sh script
        run: |
          chmod +x ./scripts/export_versions.sh
          ./scripts/export_versions.sh
          if [[ -z "$MINIO_VERSION" || -z "$HAPROXY_VERSION" ]]; then
            echo "::warning::Script did not properly export environment variables"
          else
            echo "Script successfully exported environment variables"
          fi

  validate:
    name: Validate Configurations
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ needs.setup.outputs.go_version }}

      - name: Install HAProxy for validation
        run: |
          sudo apt-get update
          sudo apt-get install -y haproxy=${{ needs.setup.outputs.haproxy_version }}* lua${{ needs.setup.outputs.lua_version }} luarocks
          haproxy -v
          lua -v

      - name: Install golangci-lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run validation checks
        run: make ci-validate

  test:
    name: Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ needs.setup.outputs.go_version }}

      - name: Run Go tests
        run: cd cmd/ratelimit-test && go test -v ./... -coverprofile=coverage.out

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: cmd/ratelimit-test/coverage.out

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [validate, setup]
    env:
      HAPROXY_VERSION: ${{ needs.setup.outputs.haproxy_version }}
      MINIO_VERSION: ${{ needs.setup.outputs.minio_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Export versions as environment variables
        run: |
          echo "Setting versions for Docker Compose:"
          echo "HAPROXY_VERSION=${{ needs.setup.outputs.haproxy_version }}"
          echo "MINIO_VERSION=${{ needs.setup.outputs.minio_version }}"
          echo "HAPROXY_VERSION=${{ needs.setup.outputs.haproxy_version }}" >> $GITHUB_ENV
          echo "MINIO_VERSION=${{ needs.setup.outputs.minio_version }}" >> $GITHUB_ENV
          chmod +x ./scripts/export_versions.sh
          ./scripts/export_versions.sh

      - name: Start services with Docker Compose
        run: |
          # Get the Docker Compose command from the environment check
          echo "Using Docker Compose command: docker compose"
          source ./scripts/export_versions.sh
          docker-compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          sleep 10
          docker-compose ps
          echo "Docker images running:"
          docker images | grep -E 'haproxy|minio'

      - name: Run quick tests
        run: make test-quick

      - name: Stop services
        run: docker-compose down

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: cmd/ratelimit-test/results/

  verify-versions:
    name: Verify Version Consistency
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify go.mod version matches versions.mk
        run: |
          GO_VERSION_MK=$(grep -E '^GO_VERSION :=' versions.mk | sed 's/GO_VERSION := //')
          GO_VERSION_MOD=$(grep -E '^go ' cmd/ratelimit-test/go.mod | awk '{print $2}')
          echo "versions.mk Go version: $GO_VERSION_MK"
          echo "go.mod Go version: $GO_VERSION_MOD"

          if [[ "$GO_VERSION_MK" != "$GO_VERSION_MOD" ]]; then
            echo "::warning::Go version mismatch between versions.mk ($GO_VERSION_MK) and go.mod ($GO_VERSION_MOD)"
            echo "Run 'make update-go-version' to synchronize versions"
          else
            echo "Go versions are in sync"
          fi

      - name: Check Docker image references
        run: |
          HAPROXY_VERSION=$(grep -E '^HAPROXY_VERSION :=' versions.mk | sed 's/HAPROXY_VERSION := //')
          HAPROXY_DOCKER_REFS=$(grep -r "haproxy:" --include="*.yml" --include="Dockerfile" . | grep -v "versions.mk")
          echo "Found HAProxy Docker references:"
          echo "$HAPROXY_DOCKER_REFS"

          INCORRECT_REFS=$(echo "$HAPROXY_DOCKER_REFS" | grep -v "$HAPROXY_VERSION" || true)
          if [[ -n "$INCORRECT_REFS" ]]; then
            echo "::warning::Found HAProxy references with incorrect version:"
            echo "$INCORRECT_REFS"
            echo "Run 'make update-haproxy-version' to synchronize versions"
          else
            echo "All HAProxy Docker references use the correct version"
          fi

  build-docker:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [validate, setup, verify-versions]
    env:
      HAPROXY_VERSION: ${{ needs.setup.outputs.haproxy_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and test HAProxy Docker image
        run: |
          echo "Building with HAProxy version: $HAPROXY_VERSION"
          docker build \
            --build-arg HAPROXY_VERSION=$HAPROXY_VERSION \
            -t minio-ratelimit-haproxy:test \
            -f haproxy/Dockerfile ./haproxy
          docker run --rm minio-ratelimit-haproxy:test haproxy -c -f /usr/local/etc/haproxy/haproxy.cfg

      - name: Build and test test-tool Docker image
        run: |
          echo "Building with Go version: ${{ needs.setup.outputs.go_version }}"
          docker build \
            --build-arg GO_VERSION=${{ needs.setup.outputs.go_version }} \
            -t minio-ratelimit-test:test \
            -f cmd/ratelimit-test/Dockerfile ./cmd/ratelimit-test
