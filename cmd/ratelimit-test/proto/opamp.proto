// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file defines the OpAMP protocol.
//
// OpAMP (Open Agent Management Protocol) is a protocol for remote management of
// agents. The protocol is vendor-agnostic, so the Server can remotely monitor
// and manage a fleet of different Agents that implement OpAMP.
//
// The protocol is message-based and works over a WebSocket or HTTP transport.
//
// See the OpAMP specification for more details.

syntax = "proto3";

package opamp.proto;

option csharp_namespace = "Opamp.Proto";
option go_package = "github.com/open-telemetry/opamp-go/client/types;types";
option java_multiple_files = true;
option java_outer_classname = "OpampProto";
option java_package = "io.opentelemetry.proto.opamp";
option objc_class_prefix = "OPAMP";
option php_namespace = "Opamp\\Proto";

// An enumeration of OpAMP capabilities.
enum Capability {
  // The default value. Used if the capability is not specified.
  CAPABILITY_UNSPECIFIED = 0;

  // The Agent is able to accept remote configuration.
  CAPABILITY_ACCEPTS_REMOTE_CONFIG = 1;

  // The Agent is able to report its effective configuration.
  CAPABILITY_REPORTS_EFFECTIVE_CONFIG = 2;

  // The Agent is able to report its own health.
  CAPABILITY_REPORTS_OWN_HEALTH = 3;

  // The Agent is able to report its own metrics.
  CAPABILITY_REPORTS_OWN_METRICS = 4;

  // The Agent is able to report its own traces.
  CAPABILITY_REPORTS_OWN_TRACES = 5;

  // The Agent is able to report its own logs.
  CAPABILITY_REPORTS_OWN_LOGS = 6;

  // The Agent is able to accept packages.
  CAPABILITY_ACCEPTS_PACKAGES = 7;

  // The Agent is able to report package statuses.
  CAPABILITY_REPORTS_PACKAGE_STATUSES = 8;
}

// A message from the Agent to the Server.
message AgentToServer {
  // A unique identifier for the Agent instance.
  string instance_uid = 1;

  // A sequence number for the message.
  uint64 sequence_num = 2;

  // A description of the Agent.
  AgentDescription agent_description = 3;

  // The capabilities of the Agent.
  uint64 capabilities = 4;

  // The health of the Agent.
  ComponentHealth health = 5;

  // The effective configuration of the Agent.
  EffectiveConfig effective_config = 6;

  // The status of the remote configuration.
  RemoteConfigStatus remote_config_status = 7;

  // The statuses of the packages.
  PackageStatuses package_statuses = 8;

  // A message from the Agent to the Server to indicate that the Agent is
  // disconnecting.
  AgentDisconnect agent_disconnect = 9;

  // A bitmask of flags for the message.
  uint64 flags = 10;

  // A request for connection settings.
  ConnectionSettingsRequest connection_settings_request = 11;

  // Custom capabilities of the Agent.
  CustomCapabilities custom_capabilities = 12;

  // A custom message from the Agent to the Server.
  CustomMessage custom_message = 13;
}

// A message from the Server to the Agent.
message ServerToAgent {
  // A unique identifier for the Agent instance.
  string instance_uid = 1;

  // A command from the Server to the Agent.
  ServerToAgentCommand command = 2;

  // A message from the Server to the Agent to indicate that the Server is
  // disconnecting.
  ServerDisconnect server_disconnect = 3;

  // A bitmask of flags for the message.
  uint64 flags = 4;
}

// A command from the Server to the Agent.
message ServerToAgentCommand {
  // A remote configuration for the Agent.
  AgentRemoteConfig remote_config = 1;

  // A command to download a package.
  DownloadPackageCommand download_package = 2;

  // A command to install a package.
  InstallPackageCommand install_package = 3;

  // A command to update the Agent.
  UpdateAgentCommand update_agent = 4;

  // A command to update the connection settings.
  ConnectionSettingsResponse connection_settings = 5;

  // A custom command from the Server to the Agent.
  CustomMessage custom_message = 6;
}

// A description of the Agent.
message AgentDescription {
  // A set of attributes that identify the Agent.
  repeated KeyValue identifying_attributes = 1;

  // A set of attributes that do not identify the Agent.
  repeated KeyValue non_identifying_attributes = 2;
}

// The health of a component.
message ComponentHealth {
  // The name of the component.
  string component = 1;

  // The health of the component.
  Health health = 2;

  // A message that describes the health of the component.
  string message = 3;
}

// An enumeration of health states.
enum Health {
  // The default value. Used if the health is not specified.
  HEALTH_UNSPECIFIED = 0;

  // The component is healthy.
  HEALTH_OK = 1;

  // The component is unhealthy.
  HEALTH_ERROR = 2;
}

// The effective configuration of the Agent.
message EffectiveConfig {
  // The configuration of the Agent.
  ConfigMap config_map = 1;
}

// A map of configuration files.
message ConfigMap {
  // A map of configuration files. The key is the file name and the value is
  // the file content.
  map<string, bytes> config_map = 1;
}

// The status of the remote configuration.
message RemoteConfigStatus {
  // The hash of the last remote configuration that was successfully applied.
  bytes last_remote_config_hash = 1;

  // The status of the remote configuration.
  Status status = 2;

  // A message that describes the status of the remote configuration.
  string message = 3;
}

// An enumeration of statuses.
enum Status {
  // The default value. Used if the status is not specified.
  STATUS_UNSPECIFIED = 0;

  // The remote configuration was successfully applied.
  STATUS_APPLIED = 1;

  // The remote configuration could not be applied.
  STATUS_FAILED = 2;
}

// The statuses of the packages.
message PackageStatuses {
  // A map of package statuses. The key is the package name and the value is
  // the package status.
  map<string, PackageStatus> package_statuses = 1;
}

// The status of a package.
message PackageStatus {
  // The name of the package.
  string name = 1;

  // The version of the package.
  string version = 2;

  // The status of the package.
  PackageStatus.Status status = 3;

  // A message that describes the status of the package.
  string message = 4;

  // An enumeration of package statuses.
  enum Status {
    // The default value. Used if the status is not specified.
    STATUS_UNSPECIFIED = 0;

    // The package is installed.
    STATUS_INSTALLED = 1;

    // The package is not installed.
    STATUS_NOT_INSTALLED = 2;

    // The package is being installed.
    STATUS_INSTALLING = 3;

    // The package is being uninstalled.
    STATUS_UNINSTALLING = 4;

    // The package installation failed.
    STATUS_INSTALL_FAILED = 5;

    // The package uninstallation failed.
    STATUS_UNINSTALL_FAILED = 6;
  }
}

// A message from the Agent to the Server to indicate that the Agent is
// disconnecting.
message AgentDisconnect {
  // The reason for the disconnection.
  string reason = 1;
}

// A request for connection settings.
message ConnectionSettingsRequest {
}

// Custom capabilities of the Agent.
message CustomCapabilities {
  // A set of custom capabilities.
  repeated string capabilities = 1;
}

// A custom message.
message CustomMessage {
  // The name of the custom message.
  string name = 1;

  // The content of the custom message.
  bytes data = 2;
}

// A remote configuration for the Agent.
message AgentRemoteConfig {
  // The configuration of the Agent.
  ConfigMap config_map = 1;

  // The hash of the remote configuration.
  bytes config_hash = 2;
}

// A command to download a package.
message DownloadPackageCommand {
  // The name of the package.
  string name = 1;

  // The version of the package.
  string version = 2;

  // The URL of the package.
  string url = 3;

  // The hash of the package.
  bytes hash = 4;
}

// A command to install a package.
message InstallPackageCommand {
  // The name of the package.
  string name = 1;

  // The version of the package.
  string version = 2;
}

// A command to update the Agent.
message UpdateAgentCommand {
  // The version of the Agent to update to.
  string version = 1;
}

// A response to a connection settings request.
message ConnectionSettingsResponse {
  // The connection settings.
  ConnectionSettings connection_settings = 1;
}

// Connection settings.
message ConnectionSettings {
  // The URL of the Server.
  string url = 1;

  // The certificate of the Server.
  bytes certificate = 2;

  // The headers to use when connecting to the Server.
  map<string, string> headers = 3;
}

// A message from the Server to the Agent to indicate that the Server is
// disconnecting.
message ServerDisconnect {
  // The reason for the disconnection.
  string reason = 1;
}

// A key-value pair.
message KeyValue {
  // The key.
  string key = 1;

  // The value.
  AnyValue value = 2;
}

// A value.
message AnyValue {
  // The type of the value.
  oneof value {
    // A string value.
    string string_value = 1;

    // A boolean value.
    bool bool_value = 2;

    // An integer value.
    int64 int_value = 3;

    // A double value.
    double double_value = 4;

    // A bytes value.
    bytes bytes_value = 5;

    // An array value.
    ArrayValue array_value = 6;

    // A key-value list value.
    KeyValueList kvlist_value = 7;
  }
}

// An array value.
message ArrayValue {
  // The values in the array.
  repeated AnyValue values = 1;
}

// A key-value list value.
message KeyValueList {
  // The key-value pairs in the list.
  repeated KeyValue values = 1;
}
