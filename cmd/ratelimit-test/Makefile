# MinIO Rate Limiting + HyperDX ClickStack Integration
# Complete observability solution with ClickHouse 25.8+ JSON capabilities

.PHONY: help setup test ingest analyze dashboard clean

# Colors
CYAN := \033[36m
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
BLUE := \033[34m
RESET := \033[0m

##@ Help
help: ## Display this help
	@echo "$(CYAN)MinIO Rate Limiting + HyperDX ClickStack$(RESET)"
	@echo "========================================"
	@awk 'BEGIN {FS = ":.*##"} /^[a-zA-Z_-]+:.*?##/ { printf "  $(CYAN)%-20s$(RESET) %s\n", $$1, $$2 } /^##@/ { printf "\n$(YELLOW)%s$(RESET)\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

wait-for-services: ## Wait for all services to be ready
	@echo "$(BLUE)üîÑ Waiting for services to be ready...$(RESET)"
	@timeout 120 bash -c 'until curl -sf http://localhost:8080 >/dev/null; do echo "$(YELLOW)‚è≥ Waiting for HyperDX...$(RESET)"; sleep 5; done' || echo "$(RED)‚ö†Ô∏è  HyperDX may still be starting$(RESET)"
	@timeout 60 bash -c 'until curl -sf http://localhost:8123/ping >/dev/null; do echo "$(YELLOW)‚è≥ Waiting for ClickHouse...$(RESET)"; sleep 3; done'
	@echo "$(GREEN)‚úÖ Services are ready!$(RESET)"


##@ Testing & Data
test: ## Run MinIO rate limiting test
	@echo "$(CYAN)üß™ Running MinIO rate limiting test...$(RESET)"
	@echo "$(BLUE)üîß Building test binary...$(RESET)"
	@go build -o build/minio-ratelimit-test *.go
	@echo "$(BLUE)üß™ Running comprehensive test...$(RESET)"
	@./build/minio-ratelimit-test > comprehensive_results.json
	@echo "$(GREEN)‚úÖ Test completed - results saved to comprehensive_results.json$(RESET)"
	@$(MAKE) show-test-summary

show-test-summary: ## Show quick test results summary
	@echo "$(CYAN)üìä Test Results Summary:$(RESET)"
	@python3 -c "import json; data=json.load(open('comprehensive_results.json')); print(f\"Total Tests: {data['summary']['TotalTests']}\"); print(f\"Total Requests: {data['summary']['TotalRequests']}\"); print(f\"Success Rate: {round(data['summary']['TotalSuccess']/data['summary']['TotalRequests']*100,1)}%\"); print(f\"Rate Limited: {data['summary']['TotalLimited']} ({round(data['summary']['TotalLimited']/data['summary']['TotalRequests']*100,1)}%)\")" 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  Run 'make test' first to generate results$(RESET)"

##@ Advanced Features
load-test: ## Run extended load test (5 minutes)
	@echo "$(CYAN)üí™ Running extended load test...$(RESET)"
	@echo "$(YELLOW)‚ö†Ô∏è  This will run for 5 minutes and generate significant data$(RESET)"
	@timeout 300 ./build/minio-ratelimit-test > comprehensive_results_load.json || echo "$(YELLOW)‚è∞ Load test completed$(RESET)"
	@mv comprehensive_results_load.json comprehensive_results.json
	@$(MAKE) ingest
	@echo "$(GREEN)‚úÖ Load test completed and data ingested$(RESET)"
