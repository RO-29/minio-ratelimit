global
    daemon
    maxconn 8192
    log stdout local0 info

    # Performance tuning  
    tune.bufsize 32768
    tune.maxrewrite 2048
    tune.http.maxhdr 200
    tune.lua.maxmem 1024

    # Optimized Lua scripts
    lua-load /usr/local/etc/haproxy/extract_api_keys_optimized.lua
    lua-load /usr/local/etc/haproxy/dynamic_rate_limiter_optimized.lua

    # Stats socket for runtime API
    stats socket /tmp/haproxy.sock mode 666 level admin
    stats timeout 30s

defaults
    mode http
    timeout connect 2000ms
    timeout client 30000ms
    timeout server 30000ms
    option httplog
    option http-keep-alive
    option dontlognull
    log global

# OPTIMIZED Frontend - Pure HAProxy with rate limiting
frontend s3_frontend_with_rate_limiting_optimized
    bind *:8084
    
    # Performance optimizations
    option httpclose
    maxconn 4096

    # Extract API key using optimized Lua
    http-request lua.extract_api_key

    # Dynamic API key to group mapping (only if API key found)
    http-request set-var(txn.rate_group) var(txn.api_key),map(/usr/local/etc/haproxy/config/api_key_groups.map,unknown) if { var(txn.api_key) -m found }

    # Dynamic rate limits from map files (only if needed)
    http-request set-var(txn.rate_limit_per_minute) var(txn.rate_group),map(/usr/local/etc/haproxy/config/rate_limits_per_minute.map,50) if { var(txn.api_key) -m found }
    http-request set-var(txn.rate_limit_per_second) var(txn.rate_group),map(/usr/local/etc/haproxy/config/rate_limits_per_second.map,5) if { var(txn.api_key) -m found }
    http-request set-var(txn.error_message) var(txn.rate_group),map(/usr/local/etc/haproxy/config/error_messages.map,Rate_limit_exceeded) if { var(txn.api_key) -m found }

    # Track requests per API key (only for PUT/GET)
    http-request track-sc0 var(txn.api_key) table api_key_rates_1m_opt if { method PUT GET } { var(txn.api_key) -m found }
    http-request track-sc1 var(txn.api_key) table api_key_rates_1s_opt if { method PUT GET } { var(txn.api_key) -m found }

    # Optimized dynamic rate limiting using Lua
    http-request lua.check_rate_limit

    # Deny request if rate limit exceeded
    http-request deny deny_status 429 content-type "application/xml" string "%[var(txn.rate_limit_error)]" if { var(txn.rate_limit_exceeded) -m str true }

    # Return immediate response - OPTIMIZED PURE HAProxy
    http-request return status 200 content-type "text/plain" string "HAProxy OPTIMIZED Rate Limiting Test - Request Processed"

    # Minimal response headers (only when needed)
    http-response set-header X-RateLimit-Group "%[var(txn.rate_group)]" if { var(txn.api_key) -m found }
    http-response set-header X-API-Key "%[var(txn.api_key)]" if { var(txn.api_key) -m found }
    http-response set-header X-Auth-Method "%[var(txn.auth_method)]" if { var(txn.api_key) -m found }
    http-response set-header X-Test-Mode "PURE_HAPROXY_OPTIMIZED_WITH_RATE_LIMITING"

# Original Frontend - Pure HAProxy with rate limiting (for comparison)
frontend s3_frontend_with_rate_limiting_original
    bind *:8081
    
    # Extract API key using original Lua
    http-request lua.extract_api_key

    # Dynamic API key to group mapping
    http-request set-var(txn.rate_group) var(txn.api_key),map(/usr/local/etc/haproxy/config/api_key_groups.map,unknown)

    # Dynamic rate limits from map files
    http-request set-var(txn.rate_limit_per_minute) var(txn.rate_group),map(/usr/local/etc/haproxy/config/rate_limits_per_minute.map,50)
    http-request set-var(txn.rate_limit_per_second) var(txn.rate_group),map(/usr/local/etc/haproxy/config/rate_limits_per_second.map,5)
    http-request set-var(txn.error_message) var(txn.rate_group),map(/usr/local/etc/haproxy/config/error_messages.map,Rate_limit_exceeded)

    # Track requests per API key
    http-request track-sc0 var(txn.api_key) table api_key_rates_1m_opt
    http-request track-sc1 var(txn.api_key) table api_key_rates_1s_opt

    # Dynamic rate limiting using Lua
    http-request lua.check_rate_limit

    # Deny request if rate limit exceeded
    http-request deny deny_status 429 content-type "application/xml" string "%[var(txn.rate_limit_error)]" if { var(txn.rate_limit_exceeded) -m str true }

    # Return immediate response
    http-request return status 200 content-type "text/plain" string "HAProxy ORIGINAL Rate Limiting Test - Request Processed"

    # Response headers
    http-response set-header X-RateLimit-Group "%[var(txn.rate_group)]"
    http-response set-header X-API-Key "%[var(txn.api_key)]"
    http-response set-header X-Auth-Method "%[var(txn.auth_method)]"
    http-response set-header X-Test-Mode "PURE_HAPROXY_ORIGINAL_WITH_RATE_LIMITING"

# Minimal HAProxy (baseline)
frontend minimal_haproxy_test
    bind *:8083

    # Return immediate response - MINIMAL HAProxy latency
    http-request return status 200 content-type "text/plain" string "Minimal HAProxy Test - Request Processed"

    # Minimal headers
    http-response set-header X-Test-Mode "MINIMAL_HAPROXY"

# Optimized stick tables
backend api_key_rates_1m_opt
    stick-table type string len 32 size 50k expire 90s store http_req_rate(1m),http_req_cnt

backend api_key_rates_1s_opt
    stick-table type string len 32 size 50k expire 5s store http_req_rate(1s),http_req_cnt

# Stats interface
listen stats_pure_test_opt
    bind *:8408
    stats enable
    stats uri /stats
    stats refresh 15s
    stats admin if TRUE
    stats show-legends
    stats show-desc "HAProxy Optimized Pure Latency Testing"