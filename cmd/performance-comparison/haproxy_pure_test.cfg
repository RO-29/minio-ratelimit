global
    daemon
    maxconn 4096
    log stdout local0 info

    # Lua script for S3 API key extraction and rate limiting
    lua-load /usr/local/etc/haproxy/extract_api_keys.lua
    lua-load /usr/local/etc/haproxy/dynamic_rate_limiter.lua

    # Stats socket for runtime API
    stats socket /tmp/haproxy.sock mode 666 level admin
    stats timeout 30s

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option httplog
    log global

# Frontend for PURE HAProxy latency testing WITH rate limiting
frontend s3_frontend_with_rate_limiting
    bind *:8081

    # Extract API key using Lua
    http-request lua.extract_api_key

    # Dynamic API key to group mapping
    http-request set-var(txn.rate_group) var(txn.api_key),map(/usr/local/etc/haproxy/config/api_key_groups.map,unknown)

    # Dynamic rate limits from map files
    http-request set-var(txn.rate_limit_per_minute) var(txn.rate_group),map(/usr/local/etc/haproxy/config/rate_limits_per_minute.map,50)
    http-request set-var(txn.rate_limit_per_second) var(txn.rate_group),map(/usr/local/etc/haproxy/config/rate_limits_per_second.map,5)
    http-request set-var(txn.error_message) var(txn.rate_group),map(/usr/local/etc/haproxy/config/error_messages.map,Rate_limit_exceeded)

    # Track requests per API key
    http-request track-sc0 var(txn.api_key) table api_key_rates_1m
    http-request track-sc1 var(txn.api_key) table api_key_rates_1s

    # Dynamic rate limiting using Lua
    http-request lua.check_rate_limit

    # Deny request if rate limit exceeded
    http-request deny deny_status 429 content-type "application/xml" string "%[var(txn.rate_limit_error)]" if { var(txn.rate_limit_exceeded) -m str true }

    # Return immediate response (no backend) - PURE HAProxy latency
    http-request return status 200 content-type "text/plain" string "HAProxy Rate Limiting Test - Request Processed"

    # Response headers for rate limiting information
    http-response set-header X-RateLimit-Group "%[var(txn.rate_group)]"
    http-response set-header X-API-Key "%[var(txn.api_key)]"
    http-response set-header X-Auth-Method "%[var(txn.auth_method)]"
    http-response set-header X-RateLimit-Limit-Per-Minute "%[var(txn.rate_limit_per_minute)]"
    http-response set-header X-RateLimit-Limit-Per-Second "%[var(txn.rate_limit_per_second)]"
    http-response set-header X-RateLimit-Current-Per-Minute "%[sc_http_req_rate(0)]"
    http-response set-header X-RateLimit-Current-Per-Second "%[sc_http_req_rate(1)]"
    http-response set-header X-Test-Mode "PURE_HAPROXY_WITH_RATE_LIMITING"

# Frontend for PURE HAProxy latency testing WITHOUT rate limiting
frontend s3_frontend_without_rate_limiting
    bind *:8082

    # Extract API key using Lua (for fair comparison)
    http-request lua.extract_api_key

    # Set group for consistency but no rate limiting
    http-request set-var(txn.rate_group) var(txn.api_key),map(/usr/local/etc/haproxy/config/api_key_groups.map,unknown)

    # Return immediate response (no backend) - PURE HAProxy latency
    http-request return status 200 content-type "text/plain" string "HAProxy No Rate Limiting Test - Request Processed"

    # Response headers for comparison
    http-response set-header X-RateLimit-Group "%[var(txn.rate_group)]"
    http-response set-header X-API-Key "%[var(txn.api_key)]"
    http-response set-header X-Auth-Method "%[var(txn.auth_method)]"
    http-response set-header X-Test-Mode "PURE_HAPROXY_NO_RATE_LIMITING"

# Frontend for MINIMAL HAProxy latency testing (no Lua, no auth)
frontend minimal_haproxy_test
    bind *:8083

    # Return immediate response - MINIMAL HAProxy latency
    http-request return status 200 content-type "text/plain" string "Minimal HAProxy Test - Request Processed"

    # Minimal headers
    http-response set-header X-Test-Mode "MINIMAL_HAPROXY"

# Stick tables for rate tracking (same as main config)
backend api_key_rates_1m
    stick-table type string len 64 size 100k expire 2m store http_req_rate(1m),http_req_cnt,http_err_rate(1m)

backend api_key_rates_1s
    stick-table type string len 64 size 100k expire 10s store http_req_rate(1s),http_req_cnt

# Stats interface
listen stats_pure_test
    bind *:8407
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats show-legends
    stats show-desc "HAProxy Pure Latency Testing"