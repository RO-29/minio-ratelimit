#!/bin/bash

# Dynamic API Key Management for HAProxy Rate Limiting
# Uses HAProxy map files for hot-reloadable API key management

MAP_FILE="./config/api_key_groups.map"
BACKUP_DIR="./config/backups"
HAPROXY_SOCKET="/tmp/haproxy.sock"

# Ensure directories exist
mkdir -p "$(dirname "$MAP_FILE")"
mkdir -p "$BACKUP_DIR"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Usage information
usage() {
    echo -e "${BLUE}Dynamic API Key Management for HAProxy${NC}"
    echo ""
    echo "Usage: $0 <command> [arguments]"
    echo ""
    echo "Commands:"
    echo "  add-key <api_key> <group>      - Add or update API key assignment"
    echo "  remove-key <api_key>           - Remove API key from rate limiting"  
    echo "  list-keys                      - Show all API keys and groups"
    echo "  set-group <api_key> <group>    - Change API key group assignment"
    echo "  reload                         - Hot reload HAProxy map file"
    echo "  backup                         - Create backup of current map file"
    echo "  restore <backup_file>          - Restore from backup file"
    echo "  validate                       - Validate map file syntax"
    echo "  stats <api_key>               - Show rate limiting stats for API key"
    echo ""
    echo "Groups: premium, standard, basic"
    echo ""
    echo "Examples:"
    echo "  $0 add-key AKIA-CUSTOMER-001 premium"
    echo "  $0 list-keys" 
    echo "  $0 set-group AKIA-CUSTOMER-001 standard"
    echo "  $0 reload"
    exit 1
}

# Create backup
create_backup() {
    if [[ -f "$MAP_FILE" ]]; then
        backup_name="api_key_groups_$(date +%Y%m%d_%H%M%S).map"
        backup_path="$BACKUP_DIR/$backup_name"
        cp "$MAP_FILE" "$backup_path"
        echo -e "${GREEN}‚úÖ Backup created: $backup_path${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Map file does not exist yet${NC}"
        return 1
    fi
}

# Validate map file syntax
validate_map_file() {
    if [[ ! -f "$MAP_FILE" ]]; then
        echo -e "${RED}‚ùå Map file not found: $MAP_FILE${NC}"
        return 1
    fi

    local errors=0
    local line_num=0

    while IFS= read -r line; do
        ((line_num++))
        
        # Skip comments and empty lines
        [[ "$line" =~ ^[[:space:]]*# ]] && continue
        [[ "$line" =~ ^[[:space:]]*$ ]] && continue

        # Check format: api_key group
        if ! [[ "$line" =~ ^[^[:space:]]+[[:space:]]+[^[:space:]]+$ ]]; then
            echo -e "${RED}‚ùå Invalid format at line $line_num: $line${NC}"
            ((errors++))
        fi
    done < "$MAP_FILE"

    if [[ $errors -eq 0 ]]; then
        echo -e "${GREEN}‚úÖ Map file syntax is valid${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Found $errors syntax errors${NC}"
        return 1
    fi
}

# Hot reload HAProxy map file
reload_haproxy_map() {
    if validate_map_file; then
        # Try to reload via HAProxy runtime API
        if command -v docker-compose >/dev/null 2>&1; then
            echo -e "${BLUE}üîÑ Hot reloading HAProxy map file...${NC}"
            
            # Reload map in both HAProxy instances
            docker-compose exec haproxy1 sh -c "echo 'clear map #0' | socat stdio unix-connect:/tmp/haproxy.sock" 2>/dev/null || true
            docker-compose exec haproxy1 sh -c "echo 'clear map /usr/local/etc/haproxy/config/api_key_groups.map' | socat stdio unix-connect:/tmp/haproxy.sock" 2>/dev/null || true
            
            docker-compose exec haproxy2 sh -c "echo 'clear map #0' | socat stdio unix-connect:/tmp/haproxy.sock" 2>/dev/null || true  
            docker-compose exec haproxy2 sh -c "echo 'clear map /usr/local/etc/haproxy/config/api_key_groups.map' | socat stdio unix-connect:/tmp/haproxy.sock" 2>/dev/null || true
            
            echo -e "${GREEN}‚úÖ HAProxy map file reloaded${NC}"
            echo -e "${YELLOW}üí° Changes are now active without restarting HAProxy${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  docker-compose not available. Manual HAProxy reload required.${NC}"
        fi
    fi
}

# Add or update API key
add_api_key() {
    local api_key="$1"
    local group="$2"
    
    if [[ -z "$api_key" || -z "$group" ]]; then
        echo -e "${RED}‚ùå Usage: add-key <api_key> <group>${NC}"
        return 1
    fi

    # Validate group
    if [[ ! "$group" =~ ^(premium|standard|basic)$ ]]; then
        echo -e "${RED}‚ùå Invalid group: $group. Must be: premium, standard, basic${NC}"
        return 1
    fi

    # Create backup before modification
    create_backup

    # Initialize map file if it doesn't exist
    if [[ ! -f "$MAP_FILE" ]]; then
        cat > "$MAP_FILE" << EOF
# HAProxy Map File: API Key to Group Mapping
# Format: api_key group  
# This file can be hot-reloaded without restarting HAProxy

EOF
    fi

    # Check if key already exists
    if grep -q "^$api_key " "$MAP_FILE"; then
        # Update existing key
        sed -i.bak "s/^$api_key .*/$api_key $group/" "$MAP_FILE"
        echo -e "${GREEN}‚úÖ Updated API key: $api_key -> $group${NC}"
    else
        # Add new key
        echo "$api_key $group" >> "$MAP_FILE"
        echo -e "${GREEN}‚úÖ Added API key: $api_key -> $group${NC}"
    fi

    reload_haproxy_map
}

# Remove API key
remove_api_key() {
    local api_key="$1"
    
    if [[ -z "$api_key" ]]; then
        echo -e "${RED}‚ùå Usage: remove-key <api_key>${NC}"
        return 1
    fi

    if [[ ! -f "$MAP_FILE" ]]; then
        echo -e "${RED}‚ùå Map file not found${NC}"
        return 1
    fi

    # Create backup before modification
    create_backup

    # Remove the key
    if grep -q "^$api_key " "$MAP_FILE"; then
        grep -v "^$api_key " "$MAP_FILE" > "${MAP_FILE}.tmp" && mv "${MAP_FILE}.tmp" "$MAP_FILE"
        echo -e "${GREEN}‚úÖ Removed API key: $api_key${NC}"
        reload_haproxy_map
    else
        echo -e "${YELLOW}‚ö†Ô∏è  API key not found: $api_key${NC}"
    fi
}

# List all API keys
list_api_keys() {
    if [[ ! -f "$MAP_FILE" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  No API keys configured yet${NC}"
        echo -e "${BLUE}üí° Use 'add-key <api_key> <group>' to add keys${NC}"
        return 0
    fi

    echo -e "${BLUE}üìã Current API Key Configuration${NC}"
    echo "=================================="
    
    printf "%-25s %-10s\n" "API Key" "Group"
    printf "%-25s %-10s\n" "-------" "-----"
    
    while IFS= read -r line; do
        # Skip comments and empty lines
        [[ "$line" =~ ^[[:space:]]*# ]] && continue
        [[ "$line" =~ ^[[:space:]]*$ ]] && continue
        
        # Parse api_key and group
        api_key=$(echo "$line" | awk '{print $1}')
        group=$(echo "$line" | awk '{print $2}')
        
        # Truncate long API keys
        if [[ ${#api_key} -gt 22 ]]; then
            display_key="${api_key:0:19}..."
        else
            display_key="$api_key"
        fi
        
        # Color code groups
        case "$group" in
            premium)
                printf "%-25s ${GREEN}%-10s${NC}\n" "$display_key" "$group"
                ;;
            standard)
                printf "%-25s ${YELLOW}%-10s${NC}\n" "$display_key" "$group"
                ;;
            basic)
                printf "%-25s ${BLUE}%-10s${NC}\n" "$display_key" "$group"
                ;;
            *)
                printf "%-25s %-10s\n" "$display_key" "$group"
                ;;
        esac
    done < "$MAP_FILE"
    
    echo ""
    echo -e "${BLUE}üí° Use 'reload' command to apply changes to HAProxy${NC}"
}

# Main command dispatcher
case "${1:-}" in
    add-key)
        add_api_key "$2" "$3"
        ;;
    remove-key)
        remove_api_key "$2"
        ;;
    list-keys)
        list_api_keys
        ;;
    set-group)
        add_api_key "$2" "$3"  # Same as add-key (will update existing)
        ;;
    reload)
        reload_haproxy_map
        ;;
    backup)
        create_backup
        ;;
    validate)
        validate_map_file
        ;;
    restore)
        if [[ -n "$2" && -f "$BACKUP_DIR/$2" ]]; then
            create_backup  # Backup current before restore
            cp "$BACKUP_DIR/$2" "$MAP_FILE"
            echo -e "${GREEN}‚úÖ Restored from backup: $2${NC}"
            reload_haproxy_map
        else
            echo -e "${RED}‚ùå Backup file not found: $BACKUP_DIR/$2${NC}"
            ls -la "$BACKUP_DIR"/*.map 2>/dev/null || echo "No backup files found"
        fi
        ;;
    stats)
        echo -e "${BLUE}üìä Rate Limiting Stats for: $2${NC}"
        echo "This feature requires HAProxy stats integration"
        ;;
    *)
        usage
        ;;
esac