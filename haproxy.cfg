global
    daemon
    maxconn 4096
    log stdout local0 info
    
    # Lua script for API key extraction
    lua-load /etc/haproxy/api_key_extractor.lua
    
    # Stats socket for runtime API
    stats socket /var/run/haproxy.sock mode 600 level admin
    stats timeout 30s

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option httplog
    log global

# Frontend for S3 API requests
frontend s3_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/haproxy.pem
    
    # Extract API key using Lua script
    http-request lua.extract_api_key
    
    # Set rate limit group based on API key
    http-request set-var(txn.rate_group) lua.get_rate_group
    
    # Track requests per API key in stick table for different time windows
    http-request track-sc0 var(txn.api_key) table api_key_rates_1m
    http-request track-sc1 var(txn.api_key) table api_key_rates_1s
    
    # Apply rate limiting based on request method
    acl is_put method PUT
    acl is_get method GET
    acl is_post method POST
    acl is_delete method DELETE
    acl is_head method HEAD
    
    # Focus on PUT and GET as requested
    acl rate_limited_methods is_put or is_get
    
    # Rate limiting groups
    acl is_premium_group var(txn.rate_group) -m str premium
    acl is_standard_group var(txn.rate_group) -m str standard
    acl is_basic_group var(txn.rate_group) -m str basic
    
    # Set rate limits per group (requests per minute)
    http-request set-var(txn.rate_limit_per_min) int(1000) if is_premium_group
    http-request set-var(txn.rate_limit_per_min) int(500) if is_standard_group
    http-request set-var(txn.rate_limit_per_min) int(100) if is_basic_group
    http-request set-var(txn.rate_limit_per_min) int(50) if !is_premium_group !is_standard_group !is_basic_group
    
    # Set burst limits (requests per second)
    http-request set-var(txn.rate_limit_per_sec) int(50) if is_premium_group
    http-request set-var(txn.rate_limit_per_sec) int(25) if is_standard_group  
    http-request set-var(txn.rate_limit_per_sec) int(10) if is_basic_group
    http-request set-var(txn.rate_limit_per_sec) int(5) if !is_premium_group !is_standard_group !is_basic_group
    
    # Check rate limits
    acl rate_exceeded_per_min sc_http_req_rate(0,api_key_rates_1m) gt var(txn.rate_limit_per_min)
    acl rate_exceeded_per_sec sc_http_req_rate(1,api_key_rates_1s) gt var(txn.rate_limit_per_sec)
    
    # Calculate remaining requests
    http-request set-var(txn.current_rate_1m) sc_http_req_rate(0,api_key_rates_1m)
    http-request set-var(txn.remaining_requests) lua.calculate_remaining
    
    # Block requests that exceed rate limits (only for PUT/GET)
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Please reduce your request rate. Rate limit exceeded.</Message><RequestId>%[uuid()]</RequestId></Error>" if rate_limited_methods rate_exceeded_per_min
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Burst limit exceeded. Please reduce request frequency.</Message><RequestId>%[uuid()]</RequestId></Error>" if rate_limited_methods rate_exceeded_per_sec
    
    # Add informational headers
    http-request set-header X-API-Key-Group %[var(txn.rate_group)]
    http-request set-header X-Request-ID %[uuid()]
    
    # Add rate limit headers to responses
    http-response set-header X-RateLimit-Limit-Per-Minute "%[var(txn.rate_limit_per_min)]"
    http-response set-header X-RateLimit-Limit-Per-Second "%[var(txn.rate_limit_per_sec)]"
    http-response set-header X-RateLimit-Remaining-Per-Minute "%[var(txn.remaining_requests)]"
    http-response set-header X-RateLimit-Current-Per-Minute "%[var(txn.current_rate_1m)]"
    http-response set-header X-RateLimit-Group "%[var(txn.rate_group)]"
    http-response set-header X-RateLimit-Reset "%[date(3600),add(date())]"
    
    default_backend minio_backend

# Backend for MinIO cluster
backend minio_backend
    balance roundrobin
    option httpchk GET /minio/health/live
    
    # MinIO server instances
    server minio1 minio1.local:9000 check
    server minio2 minio2.local:9000 check
    server minio3 minio3.local:9000 check
    server minio4 minio4.local:9000 check

# Stick tables for API key rate tracking
backend api_key_rates_1m
    stick-table type string len 64 size 100k expire 2m store http_req_rate(1m),http_req_cnt,http_err_rate(1m)

backend api_key_rates_1s  
    stick-table type string len 64 size 100k expire 10s store http_req_rate(1s),http_req_cnt

# Stats interface
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE