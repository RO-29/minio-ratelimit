global
    daemon
    maxconn 4096
    log stdout local0 info
    
    # Stats socket for runtime API (Docker-friendly path)
    stats socket /tmp/haproxy.sock mode 666 level admin
    stats timeout 30s

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    option httplog
    log global

# Frontend for S3 API requests with complete authentication support
frontend s3_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/haproxy.pem
    
    # Extract API key from multiple S3 authentication methods
    
    # Method 1: AWS Signature V4 from Authorization header
    # Format: AWS4-HMAC-SHA256 Credential=AKIAIOSFODNN7EXAMPLE/20130524/us-east-1/s3/aws4_request...
    http-request set-var(txn.auth_header) req.hdr(Authorization)
    # Use a simpler approach - extract using word positions for reliability
    http-request set-var(txn.api_key) req.hdr(Authorization),word(2,'='),word(1,'/') if { req.hdr(Authorization) -m sub "Credential=" }
    http-request set-var(txn.auth_method) str(v4_header) if { var(txn.api_key) -m found }
    
    # Method 2: AWS Signature V2 from Authorization header  
    # Format: AWS AKIAIOSFODNN7EXAMPLE:frJIUN8DYpKDtOLCwo//yllqDzg=
    http-request set-var(txn.api_key) req.hdr(Authorization),word(2,' '),word(1,':') if !{ var(txn.api_key) -m found } { req.hdr(Authorization) -m beg "AWS " }
    http-request set-var(txn.auth_method) str(v2_header) if !{ var(txn.auth_method) -m found } { var(txn.api_key) -m found }
    
    # Method 3: Pre-signed URL with X-Amz-Credential
    # Format: ?X-Amz-Credential=AKIAIOSFODNN7EXAMPLE/20130524/us-east-1/s3/aws4_request
    http-request set-var(txn.presigned_cred) url_param(X-Amz-Credential) if !{ var(txn.api_key) -m found }
    http-request set-var(txn.api_key) url_param(X-Amz-Credential),field(1,'/') if !{ var(txn.api_key) -m found } { url_param(X-Amz-Credential) -m found }
    http-request set-var(txn.auth_method) str(v4_presigned) if !{ var(txn.auth_method) -m found } { var(txn.api_key) -m found }
    
    # Method 4: Legacy query parameter AWSAccessKeyId
    # Format: ?AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE
    http-request set-var(txn.api_key) url_param(AWSAccessKeyId) if !{ var(txn.api_key) -m found } { url_param(AWSAccessKeyId) -m found }
    http-request set-var(txn.auth_method) str(v2_query) if !{ var(txn.auth_method) -m found } { var(txn.api_key) -m found }
    
    # Method 5: Custom headers (fallback)
    http-request set-var(txn.api_key) req.hdr(X-API-Key) if !{ var(txn.api_key) -m found } { req.hdr(X-API-Key) -m found }
    http-request set-var(txn.api_key) req.hdr(X-Access-Key-Id) if !{ var(txn.api_key) -m found } { req.hdr(X-Access-Key-Id) -m found }
    http-request set-var(txn.auth_method) str(custom) if !{ var(txn.auth_method) -m found } { var(txn.api_key) -m found }
    
    # Default for unknown keys
    http-request set-var(txn.api_key) str(unknown) if !{ var(txn.api_key) -m found }
    http-request set-var(txn.auth_method) str(none) if !{ var(txn.auth_method) -m found }
    
    # Group assignment based on API key (hot-reloadable via file in production)
    http-request set-var(txn.rate_group) str(premium) if { var(txn.api_key) -m str test-premium-key }
    http-request set-var(txn.rate_group) str(premium) if { var(txn.api_key) -m str minioadmin }
    http-request set-var(txn.rate_group) str(premium) if { var(txn.api_key) -m str AKIAIOSFODNN7EXAMPLE }
    http-request set-var(txn.rate_group) str(premium) if { var(txn.api_key) -m str AKIA1234567890ABCDEF }
    http-request set-var(txn.rate_group) str(premium) if { var(txn.api_key) -m str client-gamma }
    
    http-request set-var(txn.rate_group) str(standard) if !{ var(txn.rate_group) -m found } { var(txn.api_key) -m str test-standard-key }
    http-request set-var(txn.rate_group) str(standard) if !{ var(txn.rate_group) -m found } { var(txn.api_key) -m str AKIAQ3EGUO4M7EXAMPLE }
    http-request set-var(txn.rate_group) str(standard) if !{ var(txn.rate_group) -m found } { var(txn.api_key) -m str AKIA9876543210FEDCBA }
    http-request set-var(txn.rate_group) str(standard) if !{ var(txn.rate_group) -m found } { var(txn.api_key) -m str client-alpha }
    http-request set-var(txn.rate_group) str(standard) if !{ var(txn.rate_group) -m found } { var(txn.api_key) -m str client-beta }
    http-request set-var(txn.rate_group) str(standard) if !{ var(txn.rate_group) -m found } { var(txn.api_key) -m str AKIA-NEW-TEST-KEY }
    
    http-request set-var(txn.rate_group) str(basic) if !{ var(txn.rate_group) -m found } { var(txn.api_key) -m str test-basic-key }
    http-request set-var(txn.rate_group) str(basic) if !{ var(txn.rate_group) -m found } { var(txn.api_key) -m str demo-key-1 }
    http-request set-var(txn.rate_group) str(basic) if !{ var(txn.rate_group) -m found } { var(txn.api_key) -m str demo-key-2 }
    
    # Default to basic for test keys, unknown for others
    http-request set-var(txn.rate_group) str(basic) if !{ var(txn.rate_group) -m found } { var(txn.api_key) -m beg test- }
    http-request set-var(txn.rate_group) str(unknown) if !{ var(txn.rate_group) -m found }
    
    # Track requests per API key (individual rate limiting)
    http-request track-sc0 var(txn.api_key) table api_key_rates_1m
    http-request track-sc1 var(txn.api_key) table api_key_rates_1s
    
    # Focus on PUT and GET requests as originally requested
    acl rate_limited_methods method PUT GET
    
    # Rate limiting groups
    acl is_premium_group var(txn.rate_group) -m str premium
    acl is_standard_group var(txn.rate_group) -m str standard
    acl is_basic_group var(txn.rate_group) -m str basic
    acl is_unknown_group var(txn.rate_group) -m str unknown
    
    # Individual API key rate limit checks (per-minute)
    acl premium_rate_exceeded sc_http_req_rate(0) gt 1000
    acl standard_rate_exceeded sc_http_req_rate(0) gt 500
    acl basic_rate_exceeded sc_http_req_rate(0) gt 100
    acl unknown_rate_exceeded sc_http_req_rate(0) gt 50
    
    # Individual API key burst limits (per-second)
    acl premium_burst_exceeded sc_http_req_rate(1) gt 50
    acl standard_burst_exceeded sc_http_req_rate(1) gt 25
    acl basic_burst_exceeded sc_http_req_rate(1) gt 10
    acl unknown_burst_exceeded sc_http_req_rate(1) gt 5
    
    # Rate limiting enforcement (only for PUT and GET)
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Premium tier rate limit exceeded (1000 requests/minute per API key)</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId><ApiKey>%[var(txn.api_key)]</ApiKey></Error>" if rate_limited_methods is_premium_group premium_rate_exceeded
    
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Standard tier rate limit exceeded (500 requests/minute per API key)</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId><ApiKey>%[var(txn.api_key)]</ApiKey></Error>" if rate_limited_methods is_standard_group standard_rate_exceeded
    
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Basic tier rate limit exceeded (100 requests/minute per API key)</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId><ApiKey>%[var(txn.api_key)]</ApiKey></Error>" if rate_limited_methods is_basic_group basic_rate_exceeded
    
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Rate limit exceeded (50 requests/minute per API key)</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId><ApiKey>%[var(txn.api_key)]</ApiKey></Error>" if rate_limited_methods is_unknown_group unknown_rate_exceeded
    
    # Burst limit enforcement
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Premium tier burst limit exceeded (50 requests/second per API key)</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId><ApiKey>%[var(txn.api_key)]</ApiKey></Error>" if rate_limited_methods is_premium_group premium_burst_exceeded
    
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Standard tier burst limit exceeded (25 requests/second per API key)</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId><ApiKey>%[var(txn.api_key)]</ApiKey></Error>" if rate_limited_methods is_standard_group standard_burst_exceeded
    
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Basic tier burst limit exceeded (10 requests/second per API key)</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId><ApiKey>%[var(txn.api_key)]</ApiKey></Error>" if rate_limited_methods is_basic_group basic_burst_exceeded
    
    http-request deny deny_status 429 content-type "application/xml" string "<?xml version=\"1.0\" encoding=\"UTF-8\"?><Error><Code>SlowDown</Code><Message>Burst limit exceeded (5 requests/second per API key)</Message><Resource>%[path]</Resource><RequestId>%[uuid()]</RequestId><ApiKey>%[var(txn.api_key)]</ApiKey></Error>" if rate_limited_methods is_unknown_group unknown_burst_exceeded
    
    # Add comprehensive debugging and rate limit headers
    http-request set-header X-Debug-API-Key %[var(txn.api_key)]
    http-request set-header X-Debug-Auth-Method %[var(txn.auth_method)]
    http-request set-header X-Debug-Rate-Group %[var(txn.rate_group)]
    http-request set-header X-Request-ID %[uuid()]
    
    # Response headers for rate limiting information
    http-response set-header X-RateLimit-Group "%[var(txn.rate_group)]"
    http-response set-header X-API-Key "%[var(txn.api_key)]"
    http-response set-header X-Auth-Method "%[var(txn.auth_method)]"
    
    # Group-specific rate limit headers
    http-response set-header X-RateLimit-Limit-Per-Minute "1000" if is_premium_group
    http-response set-header X-RateLimit-Limit-Per-Minute "500" if is_standard_group
    http-response set-header X-RateLimit-Limit-Per-Minute "100" if is_basic_group
    http-response set-header X-RateLimit-Limit-Per-Minute "50" if is_unknown_group
    
    http-response set-header X-RateLimit-Limit-Per-Second "50" if is_premium_group
    http-response set-header X-RateLimit-Limit-Per-Second "25" if is_standard_group
    http-response set-header X-RateLimit-Limit-Per-Second "10" if is_basic_group
    http-response set-header X-RateLimit-Limit-Per-Second "5" if is_unknown_group
    
    http-response set-header X-RateLimit-Current-Per-Minute "%[sc_http_req_rate(0)]"
    http-response set-header X-RateLimit-Current-Per-Second "%[sc_http_req_rate(1)]"
    http-response set-header X-RateLimit-Reset "%[date(),add(3600)]"
    
    default_backend minio_backend

# Backend for MinIO cluster
backend minio_backend
    balance roundrobin
    
    # MinIO server instances
    server minio1 minio:9000

# Stick tables for individual API key rate tracking (no shared limits)
backend api_key_rates_1m
    stick-table type string len 64 size 100k expire 2m store http_req_rate(1m),http_req_cnt,http_err_rate(1m)

backend api_key_rates_1s
    stick-table type string len 64 size 100k expire 10s store http_req_rate(1s),http_req_cnt

# Stats interface for monitoring
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats show-legends
    stats show-desc "HAProxy MinIO Complete Rate Limiting - Individual API Key Tracking"
